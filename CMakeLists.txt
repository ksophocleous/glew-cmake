CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )
PROJECT( "glew" )

SET( SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src )
SET( INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include )
SET( RC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/build )

SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
FOREACH(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
	STRING(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
	SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/bin)
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/lib)
	SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/lib)
ENDFOREACH(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)

OPTION( glew-cmake_BUILD_EXE "Build the executables" OFF)
OPTION( glew-cmake_BUILD_SHARED "Build the shared glew library" ON)
OPTION( glew-cmake_BUILD_STATIC "Build the static glew library" ON)

INCLUDE_DIRECTORIES( ${INCLUDE_DIR} )

SET( LIBGLEW_SRCS ${SRC_DIR}/glew.c )

IF( glew-cmake_BUILD_EXE )
	SET(ONLY_LIBS OFF)
ELSE( )
	SET(ONLY_LIBS ON)
ENDIF( )

IF( WIN32 )
	LIST(APPEND definitions
		"WIN32_MEAN_AND_LEAN"
		"VC_EXTRALEAN"
		"_CRT_SECURE_NO_WARNINGS")
	LIST(APPEND lib_definitions
		"${definitions}"
		"GLEW_BUILD")
ENDIF(  )

IF( MSVC )
	LIST( APPEND LIBGLEW_SRCS ${RC_DIR}/glew.rc )
ENDIF(  )

IF( NOT USE_GLU )
	LIST(APPEND definitions
		"GLEW_NO_GLU")
ENDIF(  )

IF( WIN32 )
	SET( GL_LIBRARY opengl32 )
ELSEIF( APPLE )
	FIND_LIBRARY( GL_LIBRARY OpenGL )
	FIND_LIBRARY( AGL_LIBRARY AGL )
	SET( PLATFORM_SPECIFIC_LIBRARIES ${AGL_LIBRARY} )
ELSE(  )
	SET( GL_LIBRARY GL )
	SET( PLATFORM_SPECIFIC_LIBRARIES X11 dl Xext )
ENDIF(  )

IF ( glew-cmake_BUILD_STATIC )
	ADD_LIBRARY( libglew_static STATIC ${LIBGLEW_SRCS} )
	SET_TARGET_PROPERTIES(libglew_static PROPERTIES
		COMPILE_DEFINITIONS "${lib_definitions} GLEW_STATIC"
		INTERFACE_COMPILE_DEFINITIONS "GLEW_STATIC"
		INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include"
		ARCHIVE_OUTPUT_NAME "glew"
		DEBUG_POSTFIX d)

	INSTALL( TARGETS libglew_static DESTINATION lib )
	TARGET_LINK_LIBRARIES( libglew_static ${GL_LIBRARY} ${PLATFORM_SPECIFIC_LIBRARIES} )
ENDIF (  )

IF ( glew-cmake_BUILD_SHARED )
	ADD_LIBRARY( libglew_shared SHARED ${LIBGLEW_SRCS} )
	SET_TARGET_PROPERTIES(libglew_shared PROPERTIES
		COMPILE_DEFINITIONS "${lib_definitions}"
		INTERFACE_INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}/include"
		DEBUG_POSTFIX d)

	IF( WIN32 )
		SET_PROPERTY( TARGET libglew_shared PROPERTY RUNTIME_OUTPUT_NAME "glew" )
	ELSE(  )
		SET_PROPERTY( TARGET libglew_shared PROPERTY LIBRARY_OUTPUT_NAME "glew" )
	ENDIF(  )

	TARGET_LINK_LIBRARIES( libglew_shared ${GL_LIBRARY} ${PLATFORM_SPECIFIC_LIBRARIES} )
	INSTALL( TARGETS libglew_shared DESTINATION lib )
ENDIF (  )

FILE( GLOB PUBLIC_HEADERS "include/GL/*.h" )
INSTALL( FILES ${PUBLIC_HEADERS} DESTINATION include/GL/ )

IF( ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR} AND NOT ONLY_LIBS )
	SET( GLEWINFO_SRCS ${SRC_DIR}/glewinfo.c )
	SET( VISUALINFO_SRCS ${SRC_DIR}/visualinfo.c )
	IF( MSVS )
		LIST( APPEND GLEWINFO_SRCS ${RC_DIR}/glewinfo.rc )
		LIST( APPEND VISUALINFO_SRCS ${RC_DIR}/visualinfo.rc )
	ENDIF(  )

	ADD_EXECUTABLE( glewinfo ${GLEWINFO_SRCS} )
	ADD_EXECUTABLE( visualinfo ${VISUALINFO_SRCS} )
	SET_TARGET_PROPERTIES(glewinfo PROPERTIES
		COMPILE_DEFINITIONS "${definitions}"
		DEBUG_POSTFIX d)
	SET_TARGET_PROPERTIES(visualinfo PROPERTIES
		COMPILE_DEFINITIONS "${definitions}"
		DEBUG_POSTFIX d)

	IF ( glew-cmake_BUILD_STATIC )
		TARGET_LINK_LIBRARIES( glewinfo libglew_static )
		TARGET_LINK_LIBRARIES( visualinfo libglew_static )
	ELSE ( )
		TARGET_LINK_LIBRARIES( glewinfo libglew_shared )
		TARGET_LINK_LIBRARIES( visualinfo libglew_shared )
	ENDIF (  )

	INSTALL( TARGETS glewinfo visualinfo DESTINATION bin )
ENDIF(  )
